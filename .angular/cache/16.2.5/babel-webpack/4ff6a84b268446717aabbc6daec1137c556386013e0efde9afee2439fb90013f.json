{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction TodoListComponent_small_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 11);\n    i0.ɵɵtext(1, \"**required this field\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TodoListComponent_tr_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 12);\n    i0.ɵɵtext(2, \"1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 13);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"input\", 14);\n    i0.ɵɵlistener(\"change\", function TodoListComponent_tr_25_Template_input_change_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r4 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onCheck(i_r4));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_tr_25_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r4 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onDelete(i_r4));\n    });\n    i0.ɵɵtext(9, \"Deletar\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const t_r3 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(t_r3.taskName);\n  }\n}\nexport class TodoListComponent {\n  constructor() {\n    this.taskArry = [{\n      taskName: \"Arrumar a cama\",\n      isCompleted: false\n    }];\n  }\n  // Método chamado quando o formulário é submetido\n  onSubmit(form) {\n    // Adiciona uma nova tarefa ao array 'taskArry' com base nos dados do formulário\n    this.taskArry.push({\n      taskName: form.controls['task'].value,\n      isCompleted: false\n    });\n    // Reseta o formulário\n    form.reset();\n  }\n  // Método para excluir uma tarefa com base em seu índice no array\n  onDelete(index) {\n    this.taskArry.splice(index, 1);\n  }\n  // Método para marcar ou desmarcar uma tarefa como concluída\n  onCheck(index) {\n    this.taskArry[index].isCompleted = !this.taskArry[index].isCompleted;\n  }\n  static #_ = this.ɵfac = function TodoListComponent_Factory(t) {\n    return new (t || TodoListComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoListComponent,\n    selectors: [[\"app-todo-list\"]],\n    decls: 26,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"ngSubmit\"], [\"taskForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"exampleInputEmail1\"], [\"type\", \"text\", \"required\", \"\", \"id\", \"exampleInputEmail1\", \"placeholder\", \"Nome da Tarefa\", \"ngModel\", \"\", \"name\", \"task\", 1, \"form-control\"], [\"id\", \"text\", \"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"id\", \"btn-submit\", \"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"table\", \"table-dark\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [\"id\", \"text\", 1, \"form-text\", \"text-danger\"], [\"scope\", \"row\"], [1, \"task1\"], [\"type\", \"checkbox\", \"id\", \"checkbox\", \"value\", \"\", 1, \"form-check-input\", \"mt-0\", 3, \"change\"], [1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"]],\n    template: function TodoListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r8 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"ToDo List Application\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementStart(4, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function TodoListComponent_Template_form_ngSubmit_4_listener() {\n          i0.ɵɵrestoreView(_r8);\n          const _r0 = i0.ɵɵreference(5);\n          return i0.ɵɵresetView(ctx.onSubmit(_r0));\n        });\n        i0.ɵɵelementStart(6, \"div\", 3)(7, \"label\", 4);\n        i0.ɵɵtext(8, \"Digite o nome da tarefa\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵtemplate(10, TodoListComponent_small_10_Template, 2, 0, \"small\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 7);\n        i0.ɵɵtext(12, \"Enviar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(13, \"hr\");\n        i0.ɵɵelementStart(14, \"table\", 8)(15, \"thead\")(16, \"tr\");\n        i0.ɵɵelement(17, \"th\", 9);\n        i0.ɵɵelementStart(18, \"th\", 9);\n        i0.ɵɵtext(19, \"Tarefa\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"th\", 9);\n        i0.ɵɵtext(21, \"Conclu\\u00EDdo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"th\", 9);\n        i0.ɵɵtext(23, \"Deletar\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"tbody\");\n        i0.ɵɵtemplate(25, TodoListComponent_tr_25_Template, 10, 1, \"tr\", 10);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(5);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", _r0.invalid && _r0.dirty);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", _r0.invalid);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.taskArry);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgModel, i1.NgForm, i2.NgForOf, i2.NgIf],\n    styles: [\"h1[_ngcontent-%COMP%] {\\n    text-align: center;\\n    font-size: 2rem;\\n}\\n\\n#btn-submit[_ngcontent-%COMP%] {\\n    margin-top: 20px;\\n}\\n\\n#checkbox[_ngcontent-%COMP%] {\\n    margin-left: 30px;\\n}\\n\\n.task1[_ngcontent-%COMP%] {\\n    text-transform: capitalize;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdG9kby1saXN0L3RvZG8tbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSwwQkFBMEI7QUFDOUIiLCJzb3VyY2VzQ29udGVudCI6WyJoMSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGZvbnQtc2l6ZTogMnJlbTtcbn1cblxuI2J0bi1zdWJtaXQge1xuICAgIG1hcmdpbi10b3A6IDIwcHg7XG59XG5cbiNjaGVja2JveCB7XG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG59XG5cbi50YXNrMSB7XG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TodoListComponent_tr_25_Template_input_change_6_listener","restoredCtx","ɵɵrestoreView","_r6","i_r4","index","ctx_r5","ɵɵnextContext","ɵɵresetView","onCheck","TodoListComponent_tr_25_Template_button_click_8_listener","ctx_r7","onDelete","ɵɵadvance","ɵɵtextInterpolate","t_r3","taskName","TodoListComponent","constructor","taskArry","isCompleted","onSubmit","form","push","controls","value","reset","splice","_","_2","selectors","decls","vars","consts","template","TodoListComponent_Template","rf","ctx","ɵɵelement","TodoListComponent_Template_form_ngSubmit_4_listener","_r8","_r0","ɵɵreference","ɵɵtemplate","TodoListComponent_small_10_Template","TodoListComponent_tr_25_Template","ɵɵproperty","invalid","dirty"],"sources":["C:\\Users\\maiar\\OneDrive\\Área de Trabalho\\TodoList-Angular-main\\src\\app\\todo-list\\todo-list.component.ts","C:\\Users\\maiar\\OneDrive\\Área de Trabalho\\TodoList-Angular-main\\src\\app\\todo-list\\todo-list.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-todo-list',  \n  templateUrl: './todo-list.component.html', \n  styleUrls: ['./todo-list.component.css']  \n})\nexport class TodoListComponent {\n  \n  taskArry = [{ taskName: \"Arrumar a cama\", isCompleted: false }];\n\n  // Método chamado quando o formulário é submetido\n  onSubmit(form: NgForm) {\n    // Adiciona uma nova tarefa ao array 'taskArry' com base nos dados do formulário\n    this.taskArry.push({\n      taskName: form.controls['task'].value,\n      isCompleted: false\n    });\n    // Reseta o formulário\n    form.reset();\n  }\n\n  // Método para excluir uma tarefa com base em seu índice no array\n  onDelete(index: number) {\n    this.taskArry.splice(index, 1);\n  }\n\n  // Método para marcar ou desmarcar uma tarefa como concluída\n  onCheck(index: number) {\n    this.taskArry[index].isCompleted = !this.taskArry[index].isCompleted;\n  }\n}\n","<div class=\"container\">\n    <h1>ToDo List Application</h1>\n    <hr>\n\n     <!-- Formulário para adicionar tarefas -->\n    <form (ngSubmit)=\"onSubmit(taskForm)\" #taskForm=\"ngForm\">\n\n        <div class=\"form-group\">\n            <label for=\"exampleInputEmail1\">Digite o nome da tarefa</label>\n            <input type=\"text\" required class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Nome da Tarefa\" ngModel name=\"task\">\n            <small *ngIf=\"taskForm.invalid && taskForm.dirty\" id=\"text\" class=\"form-text text-danger\">**required this field</small>\n        </div>\n\n\n        <button [disabled]=\"taskForm.invalid\" id=\"btn-submit\" type=\"submit\" class=\"btn btn-primary\">Enviar</button>\n    </form>\n    <hr>\n\n      <!-- Tabela para listar as tarefas -->\n    <table class=\"table table-dark\">\n        <thead>\n            <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\">Tarefa</th>\n                <th scope=\"col\">Concluído</th>\n                <th scope=\"col\">Deletar</th>\n            </tr>\n        </thead>\n        <tbody>\n\n             <!-- Iteração sobre as tarefas do array 'taskArry' -->\n            <tr *ngFor=\"let t of taskArry; index as i\">\n                <th scope=\"row\">1</th>\n                <td class=\"task1\">{{t.taskName}}</td>\n                <td> <input class=\"form-check-input mt-0\" type=\"checkbox\" (change)=\"onCheck(i)\" id=\"checkbox\" value=\"\">\n                </td>\n                <td> <button class=\"btn btn-danger btn-sm\" (click)=\"onDelete(i)\">Deletar</button> </td>\n            </tr>\n\n\n        </tbody>\n    </table>\n\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}